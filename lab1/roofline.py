{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.738176020325546,\n",
       " 1.8740326967277579,\n",
       " 5.203279781994832,\n",
       " 2.959520144874502,\n",
       " 5.253146756799203,\n",
       " 3.017922884322475,\n",
       " 0.005274802597206,\n",
       " 0.005329106917286,\n",
       " 8.436488764703528,\n",
       " 2.660318783746622]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bandwidth = [6.952704, 7.496131, \n",
    "             20.813119, 11.838081,\n",
    "             20.861436, 11.890598,\n",
    "             0.021099, 0.021316,\n",
    "             33.745955, 10.641275]\n",
    "flop = [1738176020.325546, 1874032696.727758,\n",
    "        5203279781.994832 , 2959520144.874502,\n",
    "        5253146756.799203, 3017922884.322475,\n",
    "        5274802.597206, 5329106.917286,\n",
    "        8436488764.703528, 2660318783.746622]\n",
    "gflop = [x/1e9 for x in flop]\n",
    "gflop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.25000000292340163,\n",
       " 0.2499999928933683,\n",
       " 0.2500000015372435,\n",
       " 0.24999999111971796,\n",
       " 0.2518113689201071,\n",
       " 0.2538074943179876,\n",
       " 0.25000249287672405,\n",
       " 0.2500050158231375,\n",
       " 0.2500000004357123,\n",
       " 0.25000000317129495]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arith = [x[1] / x[0] for x in zip(bandwidth, gflop)]\n",
    "arith"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Roofline model')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xx = np.arange(0, 200/30, 0.5)\n",
    "plt.plot(xx, xx*30)\n",
    "\n",
    "xx = np.arange(0, 200/30, 0.5)\n",
    "plt.plot(xx, np.ones(len(xx))*200, 'k:')\n",
    "plt.text(10,250,'200 Gflops')\n",
    "\n",
    "xx = np.arange(200/30, 100, 0.5)\n",
    "plt.plot(xx, np.ones(len(xx))*200, 'k')\n",
    "\n",
    "plt.axvline(x=0.25, color='g', linestyle=':')\n",
    "plt.text(0.25,0.5,'0.25')\n",
    "\n",
    "plt.axvline(x=200/30, color='g', linestyle=':')\n",
    "plt.text(200/30,0.5, 'limit 6.67')\n",
    "\n",
    "plt.scatter(arith, gflop, color='r')\n",
    "\n",
    "\n",
    "plt.xscale('log', basex=10)\n",
    "plt.yscale('log', basey=10)\n",
    "plt.ylim(0.01, 1000)\n",
    "plt.xlim(0.01,100)\n",
    "plt.xlabel('Arithmetic intensity FLOPS/BYTES')\n",
    "plt.ylabel('FLOPS GFlop/sec')\n",
    "plt.title('Roofline model')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
